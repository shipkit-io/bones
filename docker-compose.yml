services:
  # Add app service for development
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    container_name: sk_bones_app
    working_dir: /workspace
    volumes:
      # Mount the current directory from host to /workspace in container for live code changes.
      - .:/workspace:cached
      # Use an anonymous volume for node_modules.
      # This ensures that node_modules installed during the 'docker build' (from Dockerfile)
      # are used, and are not overwritten by the host's node_modules or lack thereof.
      # It also isolates container's node_modules from the host.
      - /workspace/node_modules
    # The command is now defined in the Dockerfile's CMD instruction.
    # command: sh -c "chmod +x /workspace/node_modules/.bin/* 2>/dev/null || true && NODE_TLS_REJECT_UNAUTHORIZED=0 pnpm install --child-concurrency=4 && pnpm run dev"
    environment:
      # DATABASE_URL is required by the application at runtime to connect to the database.
      # It's kept here as it depends on other services (db) and might use host environment variables.
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lacy_user}:${POSTGRES_PASSWORD:-lacy_password}@db:5432/${POSTGRES_DB:-lacy}
      # NODE_ENV is now set in the Dockerfile.
      # - NODE_ENV=development
    # Wait for the database to be healthy before starting
    depends_on:
      db:
        condition: service_healthy
    # Connect to the same network as the database
    networks:
      - app-network
    # Expose Next.js app port
    ports:
      - "3000:3000"
    # Define profiles for this service
    profiles: ["development", "testing"]
    # Increase open file limits
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  db:
    image: postgres:15
    container_name: lacy_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lacy}
      POSTGRES_USER: ${POSTGRES_USER:-lacy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lacy_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    # Add healthcheck to ensure DB is ready
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-lacy_user} -d ${POSTGRES_DB:-lacy}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    # Define profiles for this service
    profiles: ["development", "testing", "database-only"]

  # Add pgAdmin service for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: sk_bones_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network
    # Define profiles for this service
    profiles: ["development"]

volumes:
  postgres_data:
  # Named volume for node_modules
  # node_modules:

# Create a shared network between containers
networks:
  app-network:
    driver: bridge
